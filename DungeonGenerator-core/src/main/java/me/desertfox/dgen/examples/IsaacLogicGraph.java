package me.desertfox.dgen.examples;

import lombok.Getter;
import me.desertfox.dgen.Direction4;

import java.util.*;

//Generated by ChatGPT
public class IsaacLogicGraph {
    // Represents the dungeon grid (true = room exists, false = empty)
    private final long seed;
    private final int GRID_SIZE;
    @Getter private boolean[][] dungeonGrid;
    private int targetRoomCount;
    private int placedRooms = 0;

    public IsaacLogicGraph(long seed, int grid_size, int targetRoomCount) {
        this.seed = seed;
        this.GRID_SIZE = grid_size;
        this.targetRoomCount = targetRoomCount;
        this.dungeonGrid = new boolean[GRID_SIZE][GRID_SIZE];
    }

    public int getStartX(){
        return GRID_SIZE / 2;
    }

    public int getStartZ(){
        return GRID_SIZE / 2;
    }

    public void generateDungeon() {
        Queue<int[]> queue = new LinkedList<>();

        // Start at the center of the grid
        int startX = getStartX();
        int startZ = getStartZ();
        dungeonGrid[startX][startZ] = true;
        placedRooms = 1;

        queue.add(new int[]{startX, startZ});

        Random random = new Random(seed);

        while (!queue.isEmpty() && placedRooms < targetRoomCount) {
            int[] current = queue.poll();

            List<int[]> validNeighbors = new ArrayList<>();
            for (Direction4 dir : Direction4.values()) {
                int neighborX = current[0] + dir.vector.getBlockX();
                int neighborZ = current[1] + dir.vector.getBlockZ();

                if (isValidPlacement(neighborX, neighborZ)) {
                    validNeighbors.add(new int[]{neighborX, neighborZ});
                }
            }

            Collections.shuffle(validNeighbors, random);

            for (int[] neighbor : validNeighbors) {
                if (placedRooms >= targetRoomCount) {
                    break;
                }

                // Place the room
                dungeonGrid[neighbor[0]][neighbor[1]] = true;
                queue.add(neighbor);
                placedRooms++;
            }
        }

        // Fill in any remaining rooms if random skips caused under-generation
        ensureExactRoomCount();
    }

    private boolean isValidPlacement(int x, int y) {
        // Check grid boundaries
        if (x < 0 || x >= GRID_SIZE || y < 0 || y >= GRID_SIZE) {
            return false;
        }

        // Check if the cell is already occupied
        if (dungeonGrid[x][y]) {
            return false;
        }

        // Check if the cell has more than one neighbor
        int neighbors = 0;
        for (Direction4 dir : Direction4.values()) {
            int neighborX = x + dir.vector.getBlockX();
            int neighborZ = y + dir.vector.getBlockZ();
            if (neighborX >= 0 && neighborX < GRID_SIZE && neighborZ >= 0 && neighborZ < GRID_SIZE) {
                if (dungeonGrid[neighborX][neighborZ]) {
                    neighbors++;
                }
            }
        }

        // Avoid overcrowded areas
        return neighbors <= 1;
    }

    public Direction4[] getNeighborRooms(int x, int z) {
        List<Direction4> neighbors = new ArrayList<>();

        for (Direction4 direction : Direction4.values()) {
            int neighborX = x + direction.vector.getBlockX();
            int neighborZ = z + direction.vector.getBlockZ();

            if (neighborX >= 0 && neighborX < GRID_SIZE && neighborZ >= 0 && neighborZ < GRID_SIZE) {
                if (dungeonGrid[neighborX][neighborZ]) {
                    neighbors.add(direction);
                }
            }
        }

        return neighbors.toArray(new Direction4[0]);
    }

    private void ensureExactRoomCount() {
        for (int x = 0; x < GRID_SIZE; x++) {
            for (int y = 0; y < GRID_SIZE; y++) {
                if (!dungeonGrid[x][y] && placedRooms < targetRoomCount) {
                    dungeonGrid[x][y] = true;
                    placedRooms++;
                }
            }
        }
    }

    public void printDungeon() {
        for (int x = 0; x < GRID_SIZE; x++) {
            for (int y = 0; y < GRID_SIZE; y++) {
                System.out.print(dungeonGrid[x][y] ? "O " : ". ");
            }
            System.out.println();
        }
    }
}